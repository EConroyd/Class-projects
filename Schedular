import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;


public class schedular {
	public static void main(String[] args)throws Exception{
		//scanning the input file 
		Scanner in = new Scanner(new File("processes.in"));
		
		System.setOut(new PrintStream(new File("processes.out")));
		//Scan in the number of processes
		String processcount = in.next();

		int pc = in.nextInt(); 
		//System.out.println(processcount + " " + pc);
		String empty = in.nextLine(); 

		String runfor = in.next();
		int rf = in.nextInt(); 
		String empty2 = in.nextLine(); 

		//System.out.println(runfor + " " + rf); 
		//System.out.println(empty + " " + empty2); 
		String use = in.next();
		String type = in.next();
		String empty3 = in.nextLine(); 
		//System.out.println(use + " " + type + " " + empty3); 
		//System.out.println(type); 
		int q = 0; 
		//System.out.println("here"); 
		if (type.compareTo("rr") != 0){
			String notneed = in.next(); 
			String notneeded = in.nextLine(); 
			System.out.println(notneeded);
		}
		else{
			//System.out.println("here2");
			String quantum = in.next();
			q = in.nextInt();
			String empty4 = in.nextLine();
			//System.out.println(quantum + " " + q + " " + empty4); 
		}
		//System.out.println("here3");
		
		ArrayList<Process> ProcessTimes = new ArrayList<Process>();
		String temp_name;
		int temp_arrival, temp_burst;
		for(int a = 0; a < pc; a++){
			//System.out.println("here4 " + a);
			//process
			in.next();
			//name
			in.next();
			//temp_name
			temp_name = in.next();
			//arrival
			in.next();
			//temp_arrival
			temp_arrival = in.nextInt();
			//burst
			in.next();
			//temp_burst
			temp_burst = in.nextInt(); 
			
			Process p = new Process(temp_name, temp_arrival, temp_burst); 
			//System.out.println(temp_name + " " + temp_arrival + " " + temp_burst); 
			ProcessTimes.add(p); 
			arrivalQueue.add(p);
		}
		
		//call function
		if(type.compareTo("fcfs") == 0){
			Fcfs( pc, rf); 
			//System.out.println("here5");
		}
		else if (type.compareTo("sjf") == 0){
			Sjf( pc, rf);
			//System.out.println("here5");
		}
		else if(type.compareTo("rr") == 0){
			Rr(pc,rf, q); 
			//System.out.println("here5");
		}
		System.out.println(); 
		for(Process p : ProcessTimes){
			System.out.println(p.name + " wait " + p.wait + " turnaround " + p.turnaround); 
		}
		
		
	}

	public static PriorityQueue<Process> arrivalQueue = new PriorityQueue<>(new ArrivalComparator()); 
	
	
	public static void Rr(int pc,int rf, int q){
		System.out.println(pc +" processes");
		System.out.println("Using Round-Robin");
		System.out.println("Quantum " + q);
		System.out.println();
		int endTime = -1; 
		int swapTime = 0; 

		PriorityQueue<Process> waitingQueue = new PriorityQueue<>(new ArrivalComparator()); 
		Process currentP = null; 
		
		for(int i = 0; i <= rf; i++){
			
			if(!arrivalQueue.isEmpty() && arrivalQueue.peek().arrival == i){
				System.out.println("Time " + i + ": " + arrivalQueue.peek().name + " arrived");
				waitingQueue.add(arrivalQueue.poll()); 
			}
			if(currentP != null  && i == endTime){
				//add back into wait list 
				System.out.println("Time " + i + ": " + currentP.name + " finished"); 
				currentP.turnaround = i - currentP.originalArrival; 
				currentP.wait = currentP.turnaround - currentP.originalBurst; 
				currentP = null; 
			}
			//swapping process due to quantum
			if(currentP != null && i == swapTime ){
				currentP.arrival = i; 
				waitingQueue.add(currentP);
				currentP = null;
			}
			
			if(!waitingQueue.isEmpty() && currentP == null){
				currentP = waitingQueue.poll();
				endTime = i + currentP.burst; 
				swapTime = q + i;//swaptime
				
				System.out.println("Time " + i + ": " + currentP.name + " selected" + " (burst " + currentP.burst + ")");
			}
			if(i < rf && waitingQueue.isEmpty() && currentP == null){
				System.out.println("Time " + i + ": IDLE"); 
			}
			if(i == rf){
				System.out.println("Finished at time " + i);
			}
			//this burst!!!!
			if(currentP != null)
				currentP.burst -= 1;
			
		}
	}

	public static void Sjf(int pc, int rf){
		System.out.println(pc + " processes");
		System.out.println("Using Shortest Job First (Pre)");
		System.out.println();
		int endTime = -1; 
		
		PriorityQueue<Process> waitingQueue = new PriorityQueue<>(new BurstComparator()); 
		Process currentP = null;
		
		for(int i = 0; i <= rf; i++){
			if(!arrivalQueue.isEmpty() && arrivalQueue.peek().arrival == i){
				System.out.println("Time " + i + ": " + arrivalQueue.peek().name + " arrived"); 
				waitingQueue.add(arrivalQueue.poll());
				
			}
			if(currentP != null && i == endTime){
				System.out.println("Time " + i + ": " + currentP.name + " finished"); 
				currentP.turnaround = i - currentP.arrival;
				currentP.wait = currentP.turnaround - currentP.originalBurst; 
				currentP = null; 
			}
			if(!waitingQueue.isEmpty() && (currentP==null || currentP.burst > waitingQueue.peek().burst)){
				if(currentP != null){
					Process helper = currentP;
					currentP = waitingQueue.poll();
					waitingQueue.add(helper);
				}
				else
					currentP = waitingQueue.poll();
				endTime = i + currentP.burst; 
				System.out.println("Time " + i + ": " + currentP.name + " selected" + " (burst " + currentP.burst + ")");
			}
			if(i < rf && waitingQueue.isEmpty() && currentP == null){
				System.out.println("Time " + i + ": IDLE"); 
			}
			if(i == rf){
				System.out.println("Finished at time " + i);
			}
			//this burst!!!!
			if(currentP != null)
				currentP.burst -= 1;
		}
		                         
	}
		
	public static void Fcfs(int pc,int rf){
		System.out.println(pc +" processes");
		System.out.println("Using First Come First Served");
		System.out.println();
		int endTime = -1; 

		PriorityQueue<Process> waitingQueue = new PriorityQueue<>(new ArrivalComparator()); 
		Process currentP = null; 
		
		for(int i = 0; i <= rf; i++){
			
			if(!arrivalQueue.isEmpty() && arrivalQueue.peek().arrival == i){
				 
				System.out.println("Time " + i + ": " + arrivalQueue.peek().name + " arrived");
				waitingQueue.add(arrivalQueue.poll()); 
			}
			if(currentP != null  && i == endTime){
				System.out.println("Time " + i + ": " + currentP.name + " finished"); 
				currentP.turnaround = i - currentP.arrival; 
				currentP.wait = currentP.turnaround - currentP.burst; 
				currentP = null; 
			}
			if(!waitingQueue.isEmpty() && currentP == null){
				currentP = waitingQueue.poll();
				endTime = i + currentP.burst; 
				System.out.println("Time " + i + ": " + currentP.name + " selected" + " (burst " + currentP.burst + ")");
			}
			if(i < rf && waitingQueue.isEmpty() && currentP == null){
				System.out.println("Time " + i + ": IDLE"); 
			}
			if(i == rf){
				System.out.println("Finished at time " + i);
			}
			
		}
	}
}

class Process {
	public String name; 
	public int arrival; 
	public int originalArrival; 
	public int burst;
	public int originalBurst;
	public int wait;
	public int turnaround; 

	public Process(String name, int arrival, int burst ){
		this.name = name; 
		this.arrival = arrival;
		this.burst = burst;
		
		originalBurst = burst; 
		originalArrival = arrival; 
	}
	public String getName(){
		return name;
	}
	public void setName(String name){
		this.name = name;
	}
	public int getArrival(){
		return arrival;
	}
	public void setArrival(int arrival){
		this.arrival = arrival;			
	}
	public int getBurst(){
		return burst;
	}
	public void setBurst(int burst){
		this.burst = burst; 
	}

}
class ArrivalComparator implements Comparator<Process>{
	public int compare(Process p1, Process p2){

		return p1.getArrival() - p2.getArrival(); 
	} 
}
class BurstComparator implements Comparator<Process>{
	public int compare(Process p1, Process p2){
		return p1.getBurst() - p2.getBurst(); 
	}
}
